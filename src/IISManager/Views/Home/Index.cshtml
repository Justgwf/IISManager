
<h3>
    Configuration Editor
    <span class="pull-right">
        <button class="btn btn-success" data-loading-text="Saving..." data-bind="click: saveXdt">Save XDT</button>
        <button class="btn btn-danger" data-loading-text="Restarting..." data-bind="click: restartSite">Restart Site</button>
    </span>
</h3>

<hr />

<div>
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="active"><a href="#config" aria-controls="config" role="tab" data-toggle="tab">applicationHost.config</a></li>
        <li role="presentation"><a href="#xdt" aria-controls="xdt" role="tab" data-toggle="tab">applicationHost.xdt</a></li>
        <li class="pull-right">
            <form class="form-inline">
                <select class="form-control" data-bind="options: templates, optionsText: 'Name', value: selectedTemplate, optionsCaption: 'Choose Template...'">
                </select>
                <button class="btn btn-default" data-bind="click: loadTemplate">Load</button>
            </form>
        </li>
    </ul>

    <div class="tab-content">
        <div role="tabpanel" class="tab-pane active" id="config">
            <div id="config-editor" style="height: 600px;"></div>
        </div>
        <div role="tabpanel" class="tab-pane" id="xdt">
            <div id="xdt-editor" style="height: 600px;"></div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="//cdnjs.cloudflare.com/ajax/libs/ace/1.2.5/ace.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/ace/1.2.5/ext-language_tools.js"></script>
    <script>
        function getAceEditor(id) {
            var editor = ace.edit(id);

            editor.$blockScrolling = Infinity;

            editor.setTheme("ace/theme/sqlserver");
            editor.setShowPrintMargin(false);

            editor.setOptions({
                enableBasicAutocompletion: true,
                enableSnippets: true,
                enableLiveAutocompletion: true
            });

            editor.getSession().setMode("ace/mode/xml");
            editor.getSession().setUseWrapMode(true);
            editor.getSession().setTabSize(2);

            return editor;
        }

        function AppViewModel() {
            var self = this;

            var configEditor = getAceEditor("config-editor");
            var xdtEditor = getAceEditor("xdt-editor");

            var configSnapshot = "";
            var xdtSnapshot = "";

            var isConfigTab = true;

            self.templates = ko.observableArray([]);
            self.selectedTemplate = ko.observable();

            self.loadTemplate = function () {
                $('a[href="#xdt"]').tab('show');
                xdtEditor.setValue(self.selectedTemplate().Content, -1);
            };

            // xdt -> config
            self.shownConfigTab = function() {
                var newXdt = xdtEditor.getValue();

                if (xdtSnapshot === newXdt) {
                    return;
                }

                $.ajax({
                    type: "POST",
                    url: "@Url.Content("~/api/xdt/preview")",
                    dataType: "text",
                    data: { newXdt: newXdt }
                }).done(function(result) {
                    xdtSnapshot = newXdt;
                    configSnapshot = result;
                    configEditor.setValue(result, -1);
                }).fail(function() {
                    alert("error");
                });
            };

            // config -> xdt
            self.shownXdtTab = function() {
                var newConfig = configEditor.getValue();

                if (configSnapshot === newConfig) {
                    return;
                }

                $.ajax({
                    type: "POST",
                    url: "@Url.Content("~/api/config/preview")",
                    dataType: "text",
                    data: { newConfig: newConfig }
                }).done(function(result) {
                    configSnapshot = newConfig;
                    xdtSnapshot = result;
                    xdtEditor.setValue(result, -1);
                }).fail(function() {
                    alert("error");
                });
            };

            self.saveXdt = function(d, event) {
                var $button = $(event.target);

                $button.button("loading");

                var url = isConfigTab ? "@Url.Content("~/api/config")" : "@Url.Content("~/api/xdt")";
                var data = isConfigTab ? { newConfig: configEditor.getValue() } : { newXdt: xdtEditor.getValue() };

                $.ajax({
                    type: "POST",
                    url: url,
                    dataType: "text",
                    data: data
                }).fail(function() {
                    alert("error");
                }).always(function() {
                    $button.button("reset");
                });
            };

            self.restartSite = function(d, event) {
                var $button = $(event.target);

                $button.button("loading");

                $.ajax({
                    type: "DELETE",
                    url: "/api/processes/0"
                }).always(function() {
                    setTimeout(function() {
                        $button.button("reset");

                        location.reload(true);
                    }, 5000);
                });
            };


            $("a[data-toggle='tab']").on("shown.bs.tab", function(e) {
                if (e.target.href.indexOf("#xdt") !== -1) {
                    isConfigTab = false;
                    self.shownXdtTab();
                } else {
                    isConfigTab = true;
                    self.shownConfigTab();
                }
            });

            // load initial data
            $.ajax({
                type: "GET",
                url: "@Url.Content("~/api/config")",
                dataType: "text"
            }).done(function(result) {
                configSnapshot = result;
                configEditor.setValue(result, -1);
            });

            $.ajax({
                type: "GET",
                url: "@Url.Content("~/api/xdt")",
                dataType: "text"
            }).done(function(result) {
                xdtSnapshot = result;
                xdtEditor.setValue(result, -1);
            });

            $.ajax({
                type: "GET",
                url: "@Url.Content("~/api/template")",
                dataType: "json"
            }).done(function (result) {
                self.templates(result);
            });
        }

        ko.applyBindings(new AppViewModel());
    </script>
}